#ifdef CHAOS_FORWARD_DECLARATION

// concate 2 values altogether
#define CHAOS_PP_CONCAT_IMPL(a,b) a ## b
#define CHAOS_PP_CONCAT(a,b) CHAOS_PP_CONCAT_IMPL(a,b)

// concate 4 values altogether
#define CHAOS_PP_CONCAT_4_IMPL(a, b, c, d) CHAOS_PP_CONCAT(CHAOS_PP_CONCAT(a, b), CHAOS_PP_CONCAT(c, d))
#define CHAOS_PP_CONCAT_4(a, b, c, d) CHAOS_PP_CONCAT_4_IMPL(a, b, c, d)

// create a hard coded UTF8 string from any byte
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_00 "\x00"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_01 "\x01"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_02 "\x02"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_03 "\x03"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_04 "\x04"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_05 "\x05"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_06 "\x06"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_07 "\x07"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_08 "\x08"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_09 "\x09"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_0A "\x0A"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_0B "\x0B"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_0C "\x0C"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_0D "\x0D"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_0E "\x0E"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_0F "\x0F"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_10 "\x10"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_11 "\x11"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_12 "\x12"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_13 "\x13"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_14 "\x14"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_15 "\x15"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_16 "\x16"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_17 "\x17"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_18 "\x18"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_19 "\x19"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_1A "\x1A"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_1B "\x1B"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_1C "\x1C"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_1D "\x1D"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_1E "\x1E"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_1F "\x1F"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_20 "\x20"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_21 "\x21"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_22 "\x22"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_23 "\x23"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_24 "\x24"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_25 "\x25"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_26 "\x26"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_27 "\x27"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_28 "\x28"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_29 "\x29"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_2A "\x2A"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_2B "\x2B"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_2C "\x2C"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_2D "\x2D"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_2E "\x2E"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_2F "\x2F"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_30 "\x30"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_31 "\x31"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_32 "\x32"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_33 "\x33"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_34 "\x34"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_35 "\x35"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_36 "\x36"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_37 "\x37"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_38 "\x38"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_39 "\x39"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_3A "\x3A"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_3B "\x3B"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_3C "\x3C"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_3D "\x3D"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_3E "\x3E"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_3F "\x3F"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_40 "\x40"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_41 "\x41"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_42 "\x42"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_43 "\x43"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_44 "\x44"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_45 "\x45"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_46 "\x46"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_47 "\x47"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_48 "\x48"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_49 "\x49"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_4A "\x4A"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_4B "\x4B"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_4C "\x4C"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_4D "\x4D"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_4E "\x4E"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_4F "\x4F"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_50 "\x50"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_51 "\x51"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_52 "\x52"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_53 "\x53"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_54 "\x54"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_55 "\x55"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_56 "\x56"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_57 "\x57"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_58 "\x58"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_59 "\x59"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_5A "\x5A"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_5B "\x5B"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_5C "\x5C"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_5D "\x5D"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_5E "\x5E"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_5F "\x5F"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_60 "\x60"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_61 "\x61"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_62 "\x62"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_63 "\x63"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_64 "\x64"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_65 "\x65"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_66 "\x66"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_67 "\x67"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_68 "\x68"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_69 "\x69"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_6A "\x6A"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_6B "\x6B"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_6C "\x6C"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_6D "\x6D"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_6E "\x6E"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_6F "\x6F"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_70 "\x70"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_71 "\x71"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_72 "\x72"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_73 "\x73"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_74 "\x74"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_75 "\x75"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_76 "\x76"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_77 "\x77"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_78 "\x78"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_79 "\x79"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_7A "\x7A"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_7B "\x7B"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_7C "\x7C"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_7D "\x7D"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_7E "\x7E"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_7F "\x7F"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_80 "\x80"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_81 "\x81"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_82 "\x82"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_83 "\x83"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_84 "\x84"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_85 "\x85"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_86 "\x86"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_87 "\x87"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_88 "\x88"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_89 "\x89"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_8A "\x8A"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_8B "\x8B"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_8C "\x8C"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_8D "\x8D"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_8E "\x8E"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_8F "\x8F"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_90 "\x90"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_91 "\x91"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_92 "\x92"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_93 "\x93"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_94 "\x94"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_95 "\x95"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_96 "\x96"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_97 "\x97"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_98 "\x98"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_99 "\x99"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_9A "\x9A"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_9B "\x9B"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_9C "\x9C"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_9D "\x9D"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_9E "\x9E"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_9F "\x9F"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_A0 "\xA0"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_A1 "\xA1"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_A2 "\xA2"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_A3 "\xA3"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_A4 "\xA4"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_A5 "\xA5"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_A6 "\xA6"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_A7 "\xA7"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_A8 "\xA8"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_A9 "\xA9"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_AA "\xAA"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_AB "\xAB"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_AC "\xAC"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_AD "\xAD"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_AE "\xAE"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_AF "\xAF"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_B0 "\xB0"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_B1 "\xB1"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_B2 "\xB2"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_B3 "\xB3"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_B4 "\xB4"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_B5 "\xB5"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_B6 "\xB6"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_B7 "\xB7"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_B8 "\xB8"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_B9 "\xB9"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_BA "\xBA"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_BB "\xBB"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_BC "\xBC"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_BD "\xBD"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_BE "\xBE"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_BF "\xBF"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_C0 "\xC0"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_C1 "\xC1"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_C2 "\xC2"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_C3 "\xC3"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_C4 "\xC4"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_C5 "\xC5"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_C6 "\xC6"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_C7 "\xC7"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_C8 "\xC8"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_C9 "\xC9"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_CA "\xCA"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_CB "\xCB"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_CC "\xCC"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_CD "\xCD"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_CE "\xCE"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_CF "\xCF"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_D0 "\xD0"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_D1 "\xD1"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_D2 "\xD2"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_D3 "\xD3"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_D4 "\xD4"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_D5 "\xD5"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_D6 "\xD6"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_D7 "\xD7"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_D8 "\xD8"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_D9 "\xD9"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_DA "\xDA"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_DB "\xDB"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_DC "\xDC"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_DD "\xDD"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_DE "\xDE"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_DF "\xDF"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_E0 "\xE0"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_E1 "\xE1"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_E2 "\xE2"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_E3 "\xE3"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_E4 "\xE4"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_E5 "\xE5"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_E6 "\xE6"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_E7 "\xE7"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_E8 "\xE8"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_E9 "\xE9"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_EA "\xEA"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_EB "\xEB"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_EC "\xEC"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_ED "\xED"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_EE "\xEE"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_EF "\xEF"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_F0 "\xF0"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_F1 "\xF1"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_F2 "\xF2"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_F3 "\xF3"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_F4 "\xF4"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_F5 "\xF5"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_F6 "\xF6"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_F7 "\xF7"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_F8 "\xF8"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_F9 "\xF9"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_FA "\xFA"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_FB "\xFB"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_FC "\xFC"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_FD "\xFD"
#define CHAOS_PP_BYTE_TO_UTF8_IMPL_FE "\xFE"

#define CHAOS_PP_BYTE_TO_UTF8_IMPL(x) CHAOS_PP_CONCAT(CHAOS_PP_BYTE_TO_UTF8_IMPL_,x)
#define CHAOS_PP_TOKENIZE_BYTE(x) CHAOS_PP_BYTE_TO_UTF8_IMPL(x)

// ensure any hexadecimal figure is uppercase
#define CHAOS_PP_NIBLE_TOUPPER_0 0
#define CHAOS_PP_NIBLE_TOUPPER_1 1
#define CHAOS_PP_NIBLE_TOUPPER_2 2
#define CHAOS_PP_NIBLE_TOUPPER_3 3
#define CHAOS_PP_NIBLE_TOUPPER_4 4
#define CHAOS_PP_NIBLE_TOUPPER_5 5
#define CHAOS_PP_NIBLE_TOUPPER_6 6
#define CHAOS_PP_NIBLE_TOUPPER_7 7
#define CHAOS_PP_NIBLE_TOUPPER_8 8
#define CHAOS_PP_NIBLE_TOUPPER_9 9
#define CHAOS_PP_NIBLE_TOUPPER_a A
#define CHAOS_PP_NIBLE_TOUPPER_A A
#define CHAOS_PP_NIBLE_TOUPPER_b B
#define CHAOS_PP_NIBLE_TOUPPER_B B
#define CHAOS_PP_NIBLE_TOUPPER_c C
#define CHAOS_PP_NIBLE_TOUPPER_C C
#define CHAOS_PP_NIBLE_TOUPPER_d D
#define CHAOS_PP_NIBLE_TOUPPER_D D
#define CHAOS_PP_NIBLE_TOUPPER_e E
#define CHAOS_PP_NIBLE_TOUPPER_E E
#define CHAOS_PP_NIBLE_TOUPPER_f F
#define CHAOS_PP_NIBLE_TOUPPER_F F
#define CHAOS_PP_NIBLE_TOUPPER_IMPL(x) CHAOS_PP_CONCAT(CHAOS_PP_NIBLE_TOUPPER_,x)
#define CHAOS_PP_NIBLE_TOUPPER(x) CHAOS_PP_NIBLE_TOUPPER_IMPL(x)

// select a given bit from any nible
#define CHAOS_PP_NIBLE_SELECT_BIT_0_0000 0
#define CHAOS_PP_NIBLE_SELECT_BIT_0_0001 1
#define CHAOS_PP_NIBLE_SELECT_BIT_0_0010 0
#define CHAOS_PP_NIBLE_SELECT_BIT_0_0011 1
#define CHAOS_PP_NIBLE_SELECT_BIT_0_0100 0
#define CHAOS_PP_NIBLE_SELECT_BIT_0_0101 1
#define CHAOS_PP_NIBLE_SELECT_BIT_0_0110 0
#define CHAOS_PP_NIBLE_SELECT_BIT_0_0111 1
#define CHAOS_PP_NIBLE_SELECT_BIT_0_1000 0
#define CHAOS_PP_NIBLE_SELECT_BIT_0_1001 1
#define CHAOS_PP_NIBLE_SELECT_BIT_0_1010 0
#define CHAOS_PP_NIBLE_SELECT_BIT_0_1011 1
#define CHAOS_PP_NIBLE_SELECT_BIT_0_1100 0
#define CHAOS_PP_NIBLE_SELECT_BIT_0_1101 1
#define CHAOS_PP_NIBLE_SELECT_BIT_0_1110 0
#define CHAOS_PP_NIBLE_SELECT_BIT_0_1111 1

#define CHAOS_PP_NIBLE_SELECT_BIT_1_0000 0
#define CHAOS_PP_NIBLE_SELECT_BIT_1_0001 0
#define CHAOS_PP_NIBLE_SELECT_BIT_1_0010 1
#define CHAOS_PP_NIBLE_SELECT_BIT_1_0011 1
#define CHAOS_PP_NIBLE_SELECT_BIT_1_0100 0
#define CHAOS_PP_NIBLE_SELECT_BIT_1_0101 0
#define CHAOS_PP_NIBLE_SELECT_BIT_1_0110 1
#define CHAOS_PP_NIBLE_SELECT_BIT_1_0111 1
#define CHAOS_PP_NIBLE_SELECT_BIT_1_1000 0
#define CHAOS_PP_NIBLE_SELECT_BIT_1_1001 0
#define CHAOS_PP_NIBLE_SELECT_BIT_1_1010 1
#define CHAOS_PP_NIBLE_SELECT_BIT_1_1011 1
#define CHAOS_PP_NIBLE_SELECT_BIT_1_1100 0
#define CHAOS_PP_NIBLE_SELECT_BIT_1_1101 0
#define CHAOS_PP_NIBLE_SELECT_BIT_1_1110 1
#define CHAOS_PP_NIBLE_SELECT_BIT_1_1111 1

#define CHAOS_PP_NIBLE_SELECT_BIT_2_0000 0
#define CHAOS_PP_NIBLE_SELECT_BIT_2_0001 0
#define CHAOS_PP_NIBLE_SELECT_BIT_2_0010 0
#define CHAOS_PP_NIBLE_SELECT_BIT_2_0011 0
#define CHAOS_PP_NIBLE_SELECT_BIT_2_0100 1
#define CHAOS_PP_NIBLE_SELECT_BIT_2_0101 1
#define CHAOS_PP_NIBLE_SELECT_BIT_2_0110 1
#define CHAOS_PP_NIBLE_SELECT_BIT_2_0111 1
#define CHAOS_PP_NIBLE_SELECT_BIT_2_1000 0
#define CHAOS_PP_NIBLE_SELECT_BIT_2_1001 0
#define CHAOS_PP_NIBLE_SELECT_BIT_2_1010 0
#define CHAOS_PP_NIBLE_SELECT_BIT_2_1011 0
#define CHAOS_PP_NIBLE_SELECT_BIT_2_1100 1
#define CHAOS_PP_NIBLE_SELECT_BIT_2_1101 1
#define CHAOS_PP_NIBLE_SELECT_BIT_2_1110 1
#define CHAOS_PP_NIBLE_SELECT_BIT_2_1111 1

#define CHAOS_PP_NIBLE_SELECT_BIT_3_0000 0
#define CHAOS_PP_NIBLE_SELECT_BIT_3_0001 0
#define CHAOS_PP_NIBLE_SELECT_BIT_3_0010 0
#define CHAOS_PP_NIBLE_SELECT_BIT_3_0011 0
#define CHAOS_PP_NIBLE_SELECT_BIT_3_0100 0
#define CHAOS_PP_NIBLE_SELECT_BIT_3_0101 0
#define CHAOS_PP_NIBLE_SELECT_BIT_3_0110 0
#define CHAOS_PP_NIBLE_SELECT_BIT_3_0111 0
#define CHAOS_PP_NIBLE_SELECT_BIT_3_1000 1
#define CHAOS_PP_NIBLE_SELECT_BIT_3_1001 1
#define CHAOS_PP_NIBLE_SELECT_BIT_3_1010 1
#define CHAOS_PP_NIBLE_SELECT_BIT_3_1011 1
#define CHAOS_PP_NIBLE_SELECT_BIT_3_1100 1
#define CHAOS_PP_NIBLE_SELECT_BIT_3_1101 1
#define CHAOS_PP_NIBLE_SELECT_BIT_3_1110 1
#define CHAOS_PP_NIBLE_SELECT_BIT_3_1111 1

#define CHAOS_PP_NIBLE_SELECT_BIT_IMPL(bit, x) CHAOS_PP_CONCAT_4(CHAOS_PP_NIBLE_SELECT_BIT_, bit, _, x)
#define CHAOS_PP_NIBLE_SELECT_BIT(bit, x) CHAOS_PP_NIBLE_SELECT_BIT_IMPL(bit, x)

// transform a nible from hexadecimal representation into binary representation
#define CHAOS_PP_NIBLE_HEX_TO_BIN_0 0000
#define CHAOS_PP_NIBLE_HEX_TO_BIN_1 0001
#define CHAOS_PP_NIBLE_HEX_TO_BIN_2 0010
#define CHAOS_PP_NIBLE_HEX_TO_BIN_3 0011
#define CHAOS_PP_NIBLE_HEX_TO_BIN_4 0100
#define CHAOS_PP_NIBLE_HEX_TO_BIN_5 0101
#define CHAOS_PP_NIBLE_HEX_TO_BIN_6 0110
#define CHAOS_PP_NIBLE_HEX_TO_BIN_7 0111
#define CHAOS_PP_NIBLE_HEX_TO_BIN_8 1000
#define CHAOS_PP_NIBLE_HEX_TO_BIN_9 1001
#define CHAOS_PP_NIBLE_HEX_TO_BIN_A 1010
#define CHAOS_PP_NIBLE_HEX_TO_BIN_B 1011
#define CHAOS_PP_NIBLE_HEX_TO_BIN_C 1100
#define CHAOS_PP_NIBLE_HEX_TO_BIN_D 1101
#define CHAOS_PP_NIBLE_HEX_TO_BIN_E 1110
#define CHAOS_PP_NIBLE_HEX_TO_BIN_F 1111
#define CHAOS_PP_NIBLE_HEX_TO_BIN_IMPL(x) CHAOS_PP_CONCAT(CHAOS_PP_NIBLE_HEX_TO_BIN_,x)
#define CHAOS_PP_NIBLE_HEX_TO_BIN(x) CHAOS_PP_NIBLE_HEX_TO_BIN_IMPL(x)

// transform a nible from binary representation into hexadecimal representation
#define CHAOS_PP_NIBLE_BIN_TO_HEX_0000 0
#define CHAOS_PP_NIBLE_BIN_TO_HEX_0001 1
#define CHAOS_PP_NIBLE_BIN_TO_HEX_0010 2
#define CHAOS_PP_NIBLE_BIN_TO_HEX_0011 3
#define CHAOS_PP_NIBLE_BIN_TO_HEX_0100 4
#define CHAOS_PP_NIBLE_BIN_TO_HEX_0101 5
#define CHAOS_PP_NIBLE_BIN_TO_HEX_0110 6
#define CHAOS_PP_NIBLE_BIN_TO_HEX_0111 7
#define CHAOS_PP_NIBLE_BIN_TO_HEX_1000 8
#define CHAOS_PP_NIBLE_BIN_TO_HEX_1001 9
#define CHAOS_PP_NIBLE_BIN_TO_HEX_1010 A
#define CHAOS_PP_NIBLE_BIN_TO_HEX_1011 B
#define CHAOS_PP_NIBLE_BIN_TO_HEX_1100 C
#define CHAOS_PP_NIBLE_BIN_TO_HEX_1101 D
#define CHAOS_PP_NIBLE_BIN_TO_HEX_1110 E
#define CHAOS_PP_NIBLE_BIN_TO_HEX_1111 F
#define CHAOS_PP_NIBLE_BIN_TO_HEX_IMPL(x) CHAOS_PP_CONCAT(CHAOS_PP_NIBLE_BIN_TO_HEX_,x)
#define CHAOS_PP_NIBLE_BIN_TO_HEX(x) CHAOS_PP_NIBLE_BIN_TO_HEX_IMPL(x)

// The purpose of this macro is to have a hard coded string buffer for UTF8 corresponding to a unicode value (not all possible values yet)
// see https://fr.wikipedia.org/wiki/UTF-8

#define CHAOS_PP_UNICODE_TO_UTF8_IMPL(a,b,c,d,e)\
CHAOS_PP_TOKENIZE_BYTE(\
  CHAOS_PP_CONCAT(\
    CHAOS_PP_NIBLE_BIN_TO_HEX(\
      CHAOS_PP_CONCAT_4(\
        1,\
        1,\
        1,\
        1\
      )\
    ),\
    CHAOS_PP_NIBLE_BIN_TO_HEX(\
      CHAOS_PP_CONCAT_4(\
        0,\
        0,\
        CHAOS_PP_NIBLE_SELECT_BIT(3,CHAOS_PP_NIBLE_HEX_TO_BIN(a)),\
        CHAOS_PP_NIBLE_SELECT_BIT(2,CHAOS_PP_NIBLE_HEX_TO_BIN(a))\
      )\
    )\
  )\
)\
CHAOS_PP_TOKENIZE_BYTE(\
  CHAOS_PP_CONCAT(\
    CHAOS_PP_NIBLE_BIN_TO_HEX(\
      CHAOS_PP_CONCAT_4(\
        1,\
        0,\
        CHAOS_PP_NIBLE_SELECT_BIT(1,CHAOS_PP_NIBLE_HEX_TO_BIN(a)),\
        CHAOS_PP_NIBLE_SELECT_BIT(0,CHAOS_PP_NIBLE_HEX_TO_BIN(a))\
      )\
    ),\
    CHAOS_PP_NIBLE_BIN_TO_HEX(\
      CHAOS_PP_CONCAT_4(\
        CHAOS_PP_NIBLE_SELECT_BIT(3,CHAOS_PP_NIBLE_HEX_TO_BIN(b)),\
        CHAOS_PP_NIBLE_SELECT_BIT(2,CHAOS_PP_NIBLE_HEX_TO_BIN(b)),\
        CHAOS_PP_NIBLE_SELECT_BIT(1,CHAOS_PP_NIBLE_HEX_TO_BIN(b)),\
        CHAOS_PP_NIBLE_SELECT_BIT(0,CHAOS_PP_NIBLE_HEX_TO_BIN(b))\
      )\
    )\
  )\
)\
CHAOS_PP_TOKENIZE_BYTE(\
  CHAOS_PP_CONCAT(\
    CHAOS_PP_NIBLE_BIN_TO_HEX(\
      CHAOS_PP_CONCAT_4(\
        1,\
        0,\
        CHAOS_PP_NIBLE_SELECT_BIT(3,CHAOS_PP_NIBLE_HEX_TO_BIN(c)),\
        CHAOS_PP_NIBLE_SELECT_BIT(2,CHAOS_PP_NIBLE_HEX_TO_BIN(c))\
      )\
    ),\
    CHAOS_PP_NIBLE_BIN_TO_HEX(\
      CHAOS_PP_CONCAT_4(\
        CHAOS_PP_NIBLE_SELECT_BIT(1,CHAOS_PP_NIBLE_HEX_TO_BIN(c)),\
        CHAOS_PP_NIBLE_SELECT_BIT(0,CHAOS_PP_NIBLE_HEX_TO_BIN(c)),\
        CHAOS_PP_NIBLE_SELECT_BIT(3,CHAOS_PP_NIBLE_HEX_TO_BIN(d)),\
        CHAOS_PP_NIBLE_SELECT_BIT(2,CHAOS_PP_NIBLE_HEX_TO_BIN(d))\
      )\
    )\
  )\
)\
CHAOS_PP_TOKENIZE_BYTE(\
  CHAOS_PP_CONCAT(\
    CHAOS_PP_NIBLE_BIN_TO_HEX(\
      CHAOS_PP_CONCAT_4(\
        1,\
        0,\
        CHAOS_PP_NIBLE_SELECT_BIT(1,CHAOS_PP_NIBLE_HEX_TO_BIN(d)),\
        CHAOS_PP_NIBLE_SELECT_BIT(0,CHAOS_PP_NIBLE_HEX_TO_BIN(d))\
      )\
    ),\
    CHAOS_PP_NIBLE_BIN_TO_HEX(\
      CHAOS_PP_CONCAT_4(\
        CHAOS_PP_NIBLE_SELECT_BIT(3,CHAOS_PP_NIBLE_HEX_TO_BIN(e)),\
        CHAOS_PP_NIBLE_SELECT_BIT(2,CHAOS_PP_NIBLE_HEX_TO_BIN(e)),\
        CHAOS_PP_NIBLE_SELECT_BIT(1,CHAOS_PP_NIBLE_HEX_TO_BIN(e)),\
        CHAOS_PP_NIBLE_SELECT_BIT(0,CHAOS_PP_NIBLE_HEX_TO_BIN(e))\
      )\
    )\
  )\
)

#define CHAOS_PP_UNICODE_TO_UTF8(a,b,c,d,e) CHAOS_PP_UNICODE_TO_UTF8_IMPL(CHAOS_PP_NIBLE_TOUPPER(a),CHAOS_PP_NIBLE_TOUPPER(b),CHAOS_PP_NIBLE_TOUPPER(c),CHAOS_PP_NIBLE_TOUPPER(d), CHAOS_PP_NIBLE_TOUPPER(e))

#endif