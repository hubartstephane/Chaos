#include "chaos/ChaosPCH.h"

#include "chaos/ChaosInternals.h"

namespace chaos
{
	// -------------------------------------------------------------------
	// Key implementation
	// -------------------------------------------------------------------

	#define CHAOS_KEYBOARD_DEF(KEY) { Key::KEY, #KEY }

	static EnumMetaData<Key> const Key_metadata =
	{
		CHAOS_KEYBOARD_DEF(SPACE),
		CHAOS_KEYBOARD_DEF(APOSTROPHE),
		CHAOS_KEYBOARD_DEF(COMMA),
		CHAOS_KEYBOARD_DEF(MINUS),
		CHAOS_KEYBOARD_DEF(PERIOD),
		CHAOS_KEYBOARD_DEF(SLASH),
		CHAOS_KEYBOARD_DEF(NUM_0),
		CHAOS_KEYBOARD_DEF(NUM_1),
		CHAOS_KEYBOARD_DEF(NUM_2),
		CHAOS_KEYBOARD_DEF(NUM_3),
		CHAOS_KEYBOARD_DEF(NUM_4),
		CHAOS_KEYBOARD_DEF(NUM_5),
		CHAOS_KEYBOARD_DEF(NUM_6),
		CHAOS_KEYBOARD_DEF(NUM_7),
		CHAOS_KEYBOARD_DEF(NUM_8),
		CHAOS_KEYBOARD_DEF(NUM_9),
		CHAOS_KEYBOARD_DEF(SEMICOLON),
		CHAOS_KEYBOARD_DEF(EQUAL),
		CHAOS_KEYBOARD_DEF(A),
		CHAOS_KEYBOARD_DEF(B),
		CHAOS_KEYBOARD_DEF(C),
		CHAOS_KEYBOARD_DEF(D),
		CHAOS_KEYBOARD_DEF(E),
		CHAOS_KEYBOARD_DEF(F),
		CHAOS_KEYBOARD_DEF(G),
		CHAOS_KEYBOARD_DEF(H),
		CHAOS_KEYBOARD_DEF(I),
		CHAOS_KEYBOARD_DEF(J),
		CHAOS_KEYBOARD_DEF(K),
		CHAOS_KEYBOARD_DEF(L),
		CHAOS_KEYBOARD_DEF(M),
		CHAOS_KEYBOARD_DEF(N),
		CHAOS_KEYBOARD_DEF(O),
		CHAOS_KEYBOARD_DEF(P),
		CHAOS_KEYBOARD_DEF(Q),
		CHAOS_KEYBOARD_DEF(R),
		CHAOS_KEYBOARD_DEF(S),
		CHAOS_KEYBOARD_DEF(T),
		CHAOS_KEYBOARD_DEF(U),
		CHAOS_KEYBOARD_DEF(V),
		CHAOS_KEYBOARD_DEF(W),
		CHAOS_KEYBOARD_DEF(X),
		CHAOS_KEYBOARD_DEF(Y),
		CHAOS_KEYBOARD_DEF(Z),
		CHAOS_KEYBOARD_DEF(LEFT_BRACKET),
		CHAOS_KEYBOARD_DEF(BACKSLASH),
		CHAOS_KEYBOARD_DEF(RIGHT_BRACKET),
		CHAOS_KEYBOARD_DEF(GRAVE_ACCENT),
		CHAOS_KEYBOARD_DEF(WORLD_1),
		CHAOS_KEYBOARD_DEF(WORLD_2),
		CHAOS_KEYBOARD_DEF(ESCAPE),
		CHAOS_KEYBOARD_DEF(ENTER),
		CHAOS_KEYBOARD_DEF(TAB),
		CHAOS_KEYBOARD_DEF(BACKSPACE),
		CHAOS_KEYBOARD_DEF(INSERT),
		CHAOS_KEYBOARD_DEF(DELETE),
		CHAOS_KEYBOARD_DEF(RIGHT),
		CHAOS_KEYBOARD_DEF(LEFT),
		CHAOS_KEYBOARD_DEF(DOWN),
		CHAOS_KEYBOARD_DEF(UP),
		CHAOS_KEYBOARD_DEF(PAGE_UP),
		CHAOS_KEYBOARD_DEF(PAGE_DOWN),
		CHAOS_KEYBOARD_DEF(HOME),
		CHAOS_KEYBOARD_DEF(END),
		CHAOS_KEYBOARD_DEF(CAPS_LOCK),
		CHAOS_KEYBOARD_DEF(SCROLL_LOCK),
		CHAOS_KEYBOARD_DEF(NUM_LOCK),
		CHAOS_KEYBOARD_DEF(PRINT_SCREEN),
		CHAOS_KEYBOARD_DEF(PAUSE),
		CHAOS_KEYBOARD_DEF(F1),
		CHAOS_KEYBOARD_DEF(F2),
		CHAOS_KEYBOARD_DEF(F3),
		CHAOS_KEYBOARD_DEF(F4),
		CHAOS_KEYBOARD_DEF(F5),
		CHAOS_KEYBOARD_DEF(F6),
		CHAOS_KEYBOARD_DEF(F7),
		CHAOS_KEYBOARD_DEF(F8),
		CHAOS_KEYBOARD_DEF(F9),
		CHAOS_KEYBOARD_DEF(F10),
		CHAOS_KEYBOARD_DEF(F11),
		CHAOS_KEYBOARD_DEF(F12),
		CHAOS_KEYBOARD_DEF(F13),
		CHAOS_KEYBOARD_DEF(F14),
		CHAOS_KEYBOARD_DEF(F15),
		CHAOS_KEYBOARD_DEF(F16),
		CHAOS_KEYBOARD_DEF(F17),
		CHAOS_KEYBOARD_DEF(F18),
		CHAOS_KEYBOARD_DEF(F19),
		CHAOS_KEYBOARD_DEF(F20),
		CHAOS_KEYBOARD_DEF(F21),
		CHAOS_KEYBOARD_DEF(F22),
		CHAOS_KEYBOARD_DEF(F23),
		CHAOS_KEYBOARD_DEF(F24),
		CHAOS_KEYBOARD_DEF(F25),
		CHAOS_KEYBOARD_DEF(KP_0),
		CHAOS_KEYBOARD_DEF(KP_1),
		CHAOS_KEYBOARD_DEF(KP_2),
		CHAOS_KEYBOARD_DEF(KP_3),
		CHAOS_KEYBOARD_DEF(KP_4),
		CHAOS_KEYBOARD_DEF(KP_5),
		CHAOS_KEYBOARD_DEF(KP_6),
		CHAOS_KEYBOARD_DEF(KP_7),
		CHAOS_KEYBOARD_DEF(KP_8),
		CHAOS_KEYBOARD_DEF(KP_9),
		CHAOS_KEYBOARD_DEF(KP_DECIMAL),
		CHAOS_KEYBOARD_DEF(KP_DIVIDE),
		CHAOS_KEYBOARD_DEF(KP_MULTIPLY),
		CHAOS_KEYBOARD_DEF(KP_SUBTRACT),
		CHAOS_KEYBOARD_DEF(KP_ADD),
		CHAOS_KEYBOARD_DEF(KP_ENTER),
		CHAOS_KEYBOARD_DEF(KP_EQUAL),
		CHAOS_KEYBOARD_DEF(LEFT_SHIFT),
		CHAOS_KEYBOARD_DEF(LEFT_CONTROL),
		CHAOS_KEYBOARD_DEF(LEFT_ALT),
		CHAOS_KEYBOARD_DEF(LEFT_SUPER),
		CHAOS_KEYBOARD_DEF(RIGHT_SHIFT),
		CHAOS_KEYBOARD_DEF(RIGHT_CONTROL),
		CHAOS_KEYBOARD_DEF(RIGHT_ALT),
		CHAOS_KEYBOARD_DEF(RIGHT_SUPER),
		CHAOS_KEYBOARD_DEF(MENU),

		{ Key::MOUSE_BUTTON_1, "MOUSE_BUTTON_1" },
		{ Key::MOUSE_BUTTON_2, "MOUSE_BUTTON_2" },
		{ Key::MOUSE_BUTTON_3, "MOUSE_BUTTON_3" },
		{ Key::MOUSE_BUTTON_4, "MOUSE_BUTTON_4" },
		{ Key::MOUSE_BUTTON_5, "MOUSE_BUTTON_5" },
		{ Key::MOUSE_BUTTON_6, "MOUSE_BUTTON_6" },
		{ Key::MOUSE_BUTTON_7, "MOUSE_BUTTON_7" },
		{ Key::MOUSE_BUTTON_8, "MOUSE_BUTTON_8" },

		{ Key::GAMEPAD_A, "GAMEPAD_A" },
		{ Key::GAMEPAD_B, "GAMEPAD_B" },
		{ Key::GAMEPAD_X, "GAMEPAD_X" },
		{ Key::GAMEPAD_Y, "GAMEPAD_Y" },
		{ Key::GAMEPAD_LEFT_BUMPER, "GAMEPAD_LEFT_BUMPER" },
		{ Key::GAMEPAD_RIGHT_BUMPER, "GAMEPAD_RIGHT_BUMPER" },
		{ Key::GAMEPAD_SPECIAL_LEFT, "GAMEPAD_SPECIAL_LEFT" },
		{ Key::GAMEPAD_SPECIAL_RIGHT, "GAMEPAD_SPECIAL_RIGHT" },
		{ Key::GAMEPAD_GUIDE, "GAMEPAD_GUIDE" },
		{ Key::GAMEPAD_LEFT_THUMB, "GAMEPAD_LEFT_THUMB" },
		{ Key::GAMEPAD_RIGHT_THUMB, "GAMEPAD_RIGHT_THUMB" },
		{ Key::GAMEPAD_DPAD_UP, "GAMEPAD_DPAD_UP" },
		{ Key::GAMEPAD_DPAD_RIGHT, "GAMEPAD_DPAD_RIGHT" },
		{ Key::GAMEPAD_DPAD_DOWN, "GAMEPAD_DPAD_DOWN" },
		{ Key::GAMEPAD_DPAD_LEFT, "GAMEPAD_DPAD_LEFT" },
		{ Key::GAMEPAD_LEFT_TRIGGER, "GAMEPAD_LEFT_TRIGGER" },
		{ Key::GAMEPAD_RIGHT_TRIGGER, "GAMEPAD_RIGHT_TRIGGER" }
	};
#undef CHAOS_KEYBOARD_DEF

	CHAOS_IMPLEMENT_ENUM_METHOD(Key, &Key_metadata, CHAOS_API);

	bool IsKeyboardKey(Key in_key)
	{
		return (in_key >= Key::KEYBOARD_FIRST) && (in_key <= Key::KEYBOARD_LAST);
	}

	bool IsMouseKey(Key in_key)
	{
		return (in_key >= Key::MOUSE_FIRST) && (in_key <= Key::MOUSE_LAST);
	}

	bool IsGamepadKey(Key in_key)
	{
		return (in_key >= Key::GAMEPAD_FIRST) && (in_key <= Key::GAMEPAD_LAST);
	}

	Key GetKeyFromName(char const* in_name)
	{
		Key result = Key::UNKNOWN;
		if (StringToEnum(in_name, result))
			return result;
		return Key::UNKNOWN;
	}

	char const* GetKeyName(Key in_key)
	{
		if (char const* result = EnumToString(in_key))
			return result;
		return "Unknown";
	}

	InputDeviceType GetKeyInputDevice(Key in_key)
	{
		if (IsKeyboardKey(in_key))
			return InputDeviceType::KEYBOARD;
		if (IsMouseKey(in_key))
			return InputDeviceType::MOUSE;
		if (IsGamepadKey(in_key))
			return InputDeviceType::GAMEPAD;
		return InputDeviceType::UNKNOWN;
	}

	// -------------------------------------------------------------------
	// Input1D implementation
	// -------------------------------------------------------------------

	static EnumMetaData<Input1D> const Input1D_metadata =
	{
		{ Input1D::UNKNOWN, "UNKNOWN" },
		{ Input1D::GAMEPAD_LEFT_AXIS_X, "LEFT_AXIS_X" },
		{ Input1D::GAMEPAD_LEFT_AXIS_Y, "LEFT_AXIS_Y" },
		{ Input1D::GAMEPAD_RIGHT_AXIS_X, "RIGHT_AXIS_X" },
		{ Input1D::GAMEPAD_RIGHT_AXIS_Y, "RIGHT_AXIS_Y" },
		{ Input1D::GAMEPAD_LEFT_TRIGGER, "LEFT_TRIGGER" },
		{ Input1D::GAMEPAD_RIGHT_TRIGGER, "RIGHT_TRIGGER" }
	};

	CHAOS_IMPLEMENT_ENUM_METHOD(Input1D, &Input1D_metadata, CHAOS_API);


	// -------------------------------------------------------------------
	// Input2D implementation
	// -------------------------------------------------------------------

	static EnumMetaData<Input2D> const Input2D_metadata =
	{
		{ Input2D::UNKNOWN, "UNKNOWN" },
		{ Input2D::GAMEPAD_LEFT_STICK, "LEFT_STICK" },
		{ Input2D::GAMEPAD_RIGHT_STICK, "RIGHT_STICK" }
	};

	CHAOS_IMPLEMENT_ENUM_METHOD(Input2D, &Input2D_metadata, CHAOS_API);

	// -------------------------------------------------------------------
	// InputDeviceType implementation
	// -------------------------------------------------------------------

	static EnumMetaData<InputDeviceType> const InputDeviceType_metadata =
	{
		{ InputDeviceType::UNKNOWN, "UNKNOWN" },
		{ InputDeviceType::KEYBOARD, "KEYBOARD" },
		{ InputDeviceType::MOUSE, "MOUSE" },
		{ InputDeviceType::GAMEPAD, "GAMEPAD" }
	};

	CHAOS_IMPLEMENT_ENUM_METHOD(InputDeviceType, &InputDeviceType_metadata, CHAOS_API);

}; // namespace chaos
