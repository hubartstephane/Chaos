namespace chaos
{
#ifdef CHAOS_FORWARD_DECLARATION

	enum class Key;

#elif !defined CHAOS_TEMPLATE_IMPLEMENTATION

#define CHAOS_KEYDEF(KEY) KEY = KEYBOARD_FIRST + GLFW_KEY_##KEY

	/**
	 * Key: enumeration to match a key input (whether it is a a keyboard, mouse or gamepad input)
	 */

	enum class CHAOS_API Key : int
	{
		UNKNOWN = -1,

		KEYBOARD_FIRST = 0,
		CHAOS_KEYDEF(SPACE),
		CHAOS_KEYDEF(APOSTROPHE),
		CHAOS_KEYDEF(COMMA),
		CHAOS_KEYDEF(MINUS),
		CHAOS_KEYDEF(PERIOD),
		CHAOS_KEYDEF(SLASH),
		NUM_0 = KEYBOARD_FIRST + GLFW_KEY_0,
		NUM_1 = KEYBOARD_FIRST + GLFW_KEY_1,
		NUM_2 = KEYBOARD_FIRST + GLFW_KEY_2,
		NUM_3 = KEYBOARD_FIRST + GLFW_KEY_3,
		NUM_4 = KEYBOARD_FIRST + GLFW_KEY_4,
		NUM_5 = KEYBOARD_FIRST + GLFW_KEY_5,
		NUM_6 = KEYBOARD_FIRST + GLFW_KEY_6,
		NUM_7 = KEYBOARD_FIRST + GLFW_KEY_7,
		NUM_8 = KEYBOARD_FIRST + GLFW_KEY_8,
		NUM_9 = KEYBOARD_FIRST + GLFW_KEY_9,
		CHAOS_KEYDEF(SEMICOLON),
		CHAOS_KEYDEF(EQUAL),
		CHAOS_KEYDEF(A),
		CHAOS_KEYDEF(B),
		CHAOS_KEYDEF(C),
		CHAOS_KEYDEF(D),
		CHAOS_KEYDEF(E),
		CHAOS_KEYDEF(F),
		CHAOS_KEYDEF(G),
		CHAOS_KEYDEF(H),
		CHAOS_KEYDEF(I),
		CHAOS_KEYDEF(J),
		CHAOS_KEYDEF(K),
		CHAOS_KEYDEF(L),
		CHAOS_KEYDEF(M),
		CHAOS_KEYDEF(N),
		CHAOS_KEYDEF(O),
		CHAOS_KEYDEF(P),
		CHAOS_KEYDEF(Q),
		CHAOS_KEYDEF(R),
		CHAOS_KEYDEF(S),
		CHAOS_KEYDEF(T),
		CHAOS_KEYDEF(U),
		CHAOS_KEYDEF(V),
		CHAOS_KEYDEF(W),
		CHAOS_KEYDEF(X),
		CHAOS_KEYDEF(Y),
		CHAOS_KEYDEF(Z),
		CHAOS_KEYDEF(LEFT_BRACKET),
		CHAOS_KEYDEF(BACKSLASH),
		CHAOS_KEYDEF(RIGHT_BRACKET),
		CHAOS_KEYDEF(GRAVE_ACCENT),
		CHAOS_KEYDEF(WORLD_1),
		CHAOS_KEYDEF(WORLD_2),
		CHAOS_KEYDEF(ESCAPE),
		CHAOS_KEYDEF(ENTER),
		CHAOS_KEYDEF(TAB),
		CHAOS_KEYDEF(BACKSPACE),
		CHAOS_KEYDEF(INSERT),
		CHAOS_KEYDEF(DELETE),
		CHAOS_KEYDEF(RIGHT),
		CHAOS_KEYDEF(LEFT),
		CHAOS_KEYDEF(DOWN),
		CHAOS_KEYDEF(UP),
		CHAOS_KEYDEF(PAGE_UP),
		CHAOS_KEYDEF(PAGE_DOWN),
		CHAOS_KEYDEF(HOME),
		CHAOS_KEYDEF(END),
		CHAOS_KEYDEF(CAPS_LOCK),
		CHAOS_KEYDEF(SCROLL_LOCK),
		CHAOS_KEYDEF(NUM_LOCK),
		CHAOS_KEYDEF(PRINT_SCREEN),
		CHAOS_KEYDEF(PAUSE),
		CHAOS_KEYDEF(F1),
		CHAOS_KEYDEF(F2),
		CHAOS_KEYDEF(F3),
		CHAOS_KEYDEF(F4),
		CHAOS_KEYDEF(F5),
		CHAOS_KEYDEF(F6),
		CHAOS_KEYDEF(F7),
		CHAOS_KEYDEF(F8),
		CHAOS_KEYDEF(F9),
		CHAOS_KEYDEF(F10),
		CHAOS_KEYDEF(F11),
		CHAOS_KEYDEF(F12),
		CHAOS_KEYDEF(F13),
		CHAOS_KEYDEF(F14),
		CHAOS_KEYDEF(F15),
		CHAOS_KEYDEF(F16),
		CHAOS_KEYDEF(F17),
		CHAOS_KEYDEF(F18),
		CHAOS_KEYDEF(F19),
		CHAOS_KEYDEF(F20),
		CHAOS_KEYDEF(F21),
		CHAOS_KEYDEF(F22),
		CHAOS_KEYDEF(F23),
		CHAOS_KEYDEF(F24),
		CHAOS_KEYDEF(F25),
		CHAOS_KEYDEF(KP_0),
		CHAOS_KEYDEF(KP_1),
		CHAOS_KEYDEF(KP_2),
		CHAOS_KEYDEF(KP_3),
		CHAOS_KEYDEF(KP_4),
		CHAOS_KEYDEF(KP_5),
		CHAOS_KEYDEF(KP_6),
		CHAOS_KEYDEF(KP_7),
		CHAOS_KEYDEF(KP_8),
		CHAOS_KEYDEF(KP_9),
		CHAOS_KEYDEF(KP_DECIMAL),
		CHAOS_KEYDEF(KP_DIVIDE),
		CHAOS_KEYDEF(KP_MULTIPLY),
		CHAOS_KEYDEF(KP_SUBTRACT),
		CHAOS_KEYDEF(KP_ADD),
		CHAOS_KEYDEF(KP_ENTER),
		CHAOS_KEYDEF(KP_EQUAL),
		CHAOS_KEYDEF(LEFT_SHIFT), 
		CHAOS_KEYDEF(LEFT_CONTROL),
		CHAOS_KEYDEF(LEFT_ALT),
		CHAOS_KEYDEF(LEFT_SUPER),
		CHAOS_KEYDEF(RIGHT_SHIFT),
		CHAOS_KEYDEF(RIGHT_CONTROL),
		CHAOS_KEYDEF(RIGHT_ALT),
		CHAOS_KEYDEF(RIGHT_SUPER),
		CHAOS_KEYDEF(MENU),
		KEYBOARD_LAST = GLFW_KEY_MENU,

		MOUSE_FIRST = 1000,
		MOUSE_BUTTON_1 = MOUSE_FIRST + GLFW_MOUSE_BUTTON_1,
		MOUSE_BUTTON_2 = MOUSE_FIRST + GLFW_MOUSE_BUTTON_2,
		MOUSE_BUTTON_3 = MOUSE_FIRST + GLFW_MOUSE_BUTTON_3,
		MOUSE_BUTTON_4 = MOUSE_FIRST + GLFW_MOUSE_BUTTON_4,
		MOUSE_BUTTON_5 = MOUSE_FIRST + GLFW_MOUSE_BUTTON_5,
		MOUSE_BUTTON_6 = MOUSE_FIRST + GLFW_MOUSE_BUTTON_6,
		MOUSE_BUTTON_7 = MOUSE_FIRST + GLFW_MOUSE_BUTTON_7,
		MOUSE_BUTTON_8 = MOUSE_FIRST + GLFW_MOUSE_BUTTON_8,
		MOUSE_LAST = MOUSE_BUTTON_8,

		GAMEPAD_FIRST = 2000,
		GAMEPAD_A             = GAMEPAD_FIRST + GLFW_GAMEPAD_BUTTON_A,
		GAMEPAD_B             = GAMEPAD_FIRST + GLFW_GAMEPAD_BUTTON_B,
		GAMEPAD_X             = GAMEPAD_FIRST + GLFW_GAMEPAD_BUTTON_X,
		GAMEPAD_Y             = GAMEPAD_FIRST + GLFW_GAMEPAD_BUTTON_Y,
		GAMEPAD_LEFT_BUMPER   = GAMEPAD_FIRST + GLFW_GAMEPAD_BUTTON_LEFT_BUMPER,
		GAMEPAD_RIGHT_BUMPER  = GAMEPAD_FIRST + GLFW_GAMEPAD_BUTTON_RIGHT_BUMPER,
		GAMEPAD_SPECIAL_LEFT  = GAMEPAD_FIRST + GLFW_GAMEPAD_BUTTON_BACK,
		GAMEPAD_SPECIAL_RIGHT = GAMEPAD_FIRST + GLFW_GAMEPAD_BUTTON_START,
		GAMEPAD_GUIDE         = GAMEPAD_FIRST + GLFW_GAMEPAD_BUTTON_GUIDE,
		GAMEPAD_LEFT_THUMB    = GAMEPAD_FIRST + GLFW_GAMEPAD_BUTTON_LEFT_THUMB,
		GAMEPAD_RIGHT_THUMB   = GAMEPAD_FIRST + GLFW_GAMEPAD_BUTTON_RIGHT_THUMB,
		GAMEPAD_DPAD_UP       = GAMEPAD_FIRST + GLFW_GAMEPAD_BUTTON_DPAD_UP,
		GAMEPAD_DPAD_RIGHT    = GAMEPAD_FIRST + GLFW_GAMEPAD_BUTTON_DPAD_RIGHT,
		GAMEPAD_DPAD_DOWN     = GAMEPAD_FIRST + GLFW_GAMEPAD_BUTTON_DPAD_DOWN,
		GAMEPAD_DPAD_LEFT     = GAMEPAD_FIRST + GLFW_GAMEPAD_BUTTON_DPAD_LEFT,

		GAMEPAD_LEFT_TRIGGER  = GAMEPAD_FIRST + 15, // theses are simulated inputs (Left/Right Trigger is an axis for XBOX gamepad point of view)
		GAMEPAD_RIGHT_TRIGGER = GAMEPAD_FIRST + 16,
		GAMEPAD_LAST = GAMEPAD_RIGHT_TRIGGER
	};

	CHAOS_DECLARE_ENUM_METHOD(Key, CHAOS_API);

#undef CHAOS_KEYDEF

	CHAOS_API bool IsKeyboardKey(Key in_key);

	CHAOS_API bool IsMouseKey(Key in_key);

	CHAOS_API bool IsGamepadKey(Key in_key);

	CHAOS_API Key GetKeyFromName(char const * in_name);

	CHAOS_API char const* GetKeyName(Key in_key);

	CHAOS_API InputDeviceType GetKeyInputDevice(Key in_key);

#endif

}; // namespace chaos