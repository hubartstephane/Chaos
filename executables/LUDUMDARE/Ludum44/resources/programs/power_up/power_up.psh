out vec4 output_color; // "output_color" replaces "gl_FragColor" because glBindFragDataLocation(...) has been called

in vec2 vs_position;
in vec3 vs_texcoord;
in vec4 vs_color;

uniform vec2 viewport_size;
uniform vec2 window_size;
uniform vec4 camera_box;
uniform float game_time;
uniform float scroll_speed;

uniform vec4 mycolor1;
uniform vec4 mycolor2;

uniform sampler2D powerup_texture;
uniform sampler2DArray material;

void main()
{
	vec2 texcoord = 10.0 * (gl_FragCoord.xy - ((window_size.xy - viewport_size.xy) * vec2(0.5, 0.5))) / viewport_size.xy;
	texcoord.y *= viewport_size.y / viewport_size.x;

	texcoord.y -= scroll_speed * game_time;
	texcoord += vec2(1.0, 0.0) * camera_box.xy / viewport_size.xy;

	vec4 c1 = texture(powerup_texture, texcoord);	// chevrons
	vec4 tt = mix(mycolor1, mycolor2, c1.g); // tt.a

	vec4 c2 = texture(material, vs_texcoord); // blue to buy, red to sell
	


	vec4 final;

	// ORI
	//final = vec4(c2.r, c2.g, c2.b, 0.2); // blue ou rouge


	// WORK
	//final = vec4(c1.r, c1.g, c1.b, 1.0); // chevrons
	//final = vec4(c2.r, c2.g, c2.b, 1.0); // bleu ou rouge
	//final = vec4(tt.r, tt.g, tt.b, tt.a);


	final = vec4(c2.r, c2.g, c2.b, 1.0) * vec4(1.0, 1.0, 1.0, tt.a);

	// TEST
	//
	//final = vec4(c2.x, c2.y, c2.z, 1.0) * vec4(1.0, 1.0, 1.0, tt.a);

	


	output_color = final;


};