#! /usr/bin/bash

# This script compiles and installs most libraries into "external" directory
SCRIPT_PATH=$(pwd)/$0
SCRIPT_PATH=$(dirname $SCRIPT_PATH)
EXTERNAL_PATH=$SCRIPT_PATH/external

INSTALLATION_PATH=$EXTERNAL_PATH/installation
BASE_INSTALL_PATH=$EXTERNAL_PATH
BASE_BUILD_PATH=$EXTERNAL_PATH/build
CONFIGS="Release Debug"

echo "========================================================="
echo " Clean"
echo "========================================================="	

# clean previous files
#for FILE in assimp build freetype2 glfw glm json tinyxml2 boost_1_83_0 FreeImage glew-2.2.0 ImGui irrKlang-64bit-1.6.0 lua-5.4.2 MSVC_Redist zlib-1.3
#do
#  rm -fr $EXTERNAL_PATH/$FILE
#done

# create the build directory
if [ ! -d $BASE_BUILD_PATH ]
then
	mkdir -p $BASE_BUILD_PATH
fi

###########################################################################
# Unzip libraries
##########################################################################

echo "========================================================="
echo " Unzip files"
echo "========================================================="	

UNZIP_FILES=0

if [ $UNZIP_FILES -gt 0 ] ; then

	unzip $INSTALLATION_PATH/FreeImage3180Win32Win64.zip -d $BASE_INSTALL_PATH
	unzip $INSTALLATION_PATH/glew-2.2.0-win32.zip -d $BASE_INSTALL_PATH
	unzip $INSTALLATION_PATH/irrKlang-64bit-1.6.0.zip -d $BASE_INSTALL_PATH
	unzip $INSTALLATION_PATH/lua-5.4.2_Win64_vc16_lib -d $BASE_INSTALL_PATH/lua-5.4.2
	unzip $INSTALLATION_PATH/ImGui -d $BASE_INSTALL_PATH
	unzip $INSTALLATION_PATH/MSVC_Redist.zip -d $BASE_INSTALL_PATH
	
fi

###########################################################################
# Compile libraries (except zlib)
###########################################################################

function BeginBuildLibrary()
{
	LIBRARY=$1
	CONFIG_TYPE=$2
	SRC_PATH=$INSTALLATION_PATH/$LIBRARY
	BUILD_PATH=$BASE_BUILD_PATH/$LIBRARY/$CONFIG_TYPE
	INSTALL_PATH=$BASE_INSTALL_PATH/$LIBRARY/$CONFIG_TYPE
	
	echo "========================================================="
	echo "  -> Building: " $LIBRARY
	echo "       CONFIG_TYPE:  " $CONFIG_TYPE	
	echo "       SRC_PATH:     " $SRC_PATH
	echo "       BUILD_PATH:   " $BUILD_PATH
	echo "       INSTALL_PATH: " $INSTALL_PATH
	echo "========================================================="
}

###########################################################################
# Compile libraries (except zlib and freetype2)
###########################################################################

INSTALL_GENERIC_LIBS=0

if [ $INSTALL_GENERIC_LIBS -gt 0 ] ; then

	for LIBRARY in assimp glm json tinyxml2 glfw
	do
	
		BeginBuildLibrary $LIBRARY Debug
		cmake -S $SRC_PATH -B $BUILD_PATH
		cmake --build $BUILD_PATH --config Debug
		cmake --install $BUILD_PATH --prefix $INSTALL_PATH --config Debug
	
		BeginBuildLibrary $LIBRARY Release
		cmake -S $SRC_PATH -B $BUILD_PATH
		cmake --build $BUILD_PATH --config Release
		cmake --install $BUILD_PATH --prefix $INSTALL_PATH --config Release	
	
	done
fi

###########################################################################
# zlib-1.3: the --prefix is not work working for this lib. Use -DCMAKE_INSTALL_PREFIX instead
###########################################################################

INSTALL_ZLIB=0

if [ $INSTALL_ZLIB -gt 0 ] ; then

	cd $INSTALLATION_PATH/external_zip
	gunzip --stdout $INSTALLATION_PATH/zlib-1.3.tar.gz | tar -x
	mv zlib-1.3 $INSTALLATION_PATH

	BeginBuildLibrary "zlib-1.3" Debug
	cmake -S $SRC_PATH -B $BUILD_PATH -DCMAKE_INSTALL_PREFIX=$INSTALL_PATH
	cmake --build $BUILD_PATH --config Debug
	cmake --install $BUILD_PATH --config Debug
	
	BeginBuildLibrary "zlib-1.3" Release
	cmake -S $SRC_PATH -B $BUILD_PATH -DCMAKE_INSTALL_PREFIX=$INSTALL_PATH
	cmake --build $BUILD_PATH --config Release
	cmake --install $BUILD_PATH --config Release	

	rm -fr $INSTALLATION_PATH/zlib-1.3
	cd -
fi

###########################################################################
# freetype2:
#   by default freetype2 embbed its own version of zlib
#   to avoid functons collisions between zlib and freetype2 (when using chaos), some customization is required
#   after that customization, freetype2 uses the same version than ZLIB instead of its own version
#   that's why this code must be called after ZLIB installation
###########################################################################

INSTALL_FREETYPE2=1

if [ $INSTALL_FREETYPE2 -gt 0 ] ; then

	BeginBuildLibrary freetype2 Debug
	cmake -S $SRC_PATH -B $BUILD_PATH -DZLIB_LIBRARY=zlibstaticd -DZLIB_INCLUDE_DIR=$BASE_INSTALL_PATH/zlib-1.3/Debug/include
	cmake --build $BUILD_PATH --config Debug
	cmake --install $BUILD_PATH --prefix $INSTALL_PATH --config Debug

	BeginBuildLibrary freetype2 Release
	cmake -S $SRC_PATH -B $BUILD_PATH  -DZLIB_LIBRARY=zlibstatic -DZLIB_INCLUDE_DIR=$BASE_INSTALL_PATH/zlib-1.3/Release/include
	cmake --build $BUILD_PATH --config Release
	cmake --install $BUILD_PATH --prefix $INSTALL_PATH --config Release
fi


###########################################################################
# Boost
###########################################################################

INSTALL_BOOST=0

if [ $INSTALL_BOOST -gt 0 ] ; then

	echo "========================================================="
	echo " Install boost"
	echo "========================================================="	

	curl -L https://boostorg.jfrog.io/artifactory/main/release/1.83.0/source/boost_1_83_0.zip --output $BASE_BUILD_PATH/boost_1_83_0.zip  --ssl-no-revoke
	unzip $BASE_BUILD_PATH/boost_1_83_0.zip -d $BASE_BUILD_PATH
	cd $BASE_BUILD_PATH/boost_1_83_0
	$BASE_BUILD_PATH/boost_1_83_0/bootstrap.bat
	$BASE_BUILD_PATH/boost_1_83_0/b2
	$BASE_BUILD_PATH/boost_1_83_0/b2 install --prefix=$BASE_INSTALL_PATH/boost_1_83_0
	cd -
fi

###########################################################################
# Some clean
###########################################################################

echo "========================================================="
echo " Clean"
echo "========================================================="	

rm -fr $BASE_BUILD_PATH