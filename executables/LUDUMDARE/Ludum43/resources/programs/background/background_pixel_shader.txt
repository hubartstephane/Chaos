out vec4 output_color; // "output_color" replaces "gl_FragColor" because glBindFragDataLocation(...) has been called

uniform sampler2D background;
uniform sampler2D noise;
uniform sampler2D extra_background;
uniform float game_time;
uniform float decal_speed;
uniform float decal_ratio;

in vec2 vs_position;
in vec2 vs_texcoord;
in vec4 vs_color;

uniform vec4 blend_backgrounds;

void main()
{
  vec2 tex1 = 2.0 * vs_texcoord;
	vec2 tex2 = 2.0 * vs_texcoord;
	tex1.y += game_time * decal_speed;
	tex2.x += game_time * decal_speed;

	vec4 decal1 = texture(noise, tex1);
	vec4 decal2 = texture(noise, tex2);

	vec2 decal = decal1.xy + decal2.xy;

#if 1
	if (blend_backgrounds.x == 1.0)
	{
		vec2 tex = vs_texcoord + decal * decal_ratio;
	//	tex = clamp(tex, vec2(0.0, 0.0), vec2(1.0, 1.0));


		vec4 b1 = texture(background, tex);
		output_color = b1;	
	}
	else
	{
		vec4 b1 = texture(background, vs_texcoord);
		vec4 b2 = texture(extra_background, vs_texcoord);

		float l = length(b2.xyz);

		float R1 = 0.6;
		float R2 = 0.8;

		float ratio = 0.0;

		float min_ratio = 0.3;

		if (l < R1)
			ratio = min_ratio;
		else if (l > R2)
			ratio = 1.0;
		else
		{
			ratio = min_ratio + (1.0 - min_ratio) * ((l - R1) / (R2 - R1));

		}

			

		output_color = b1 * ratio + b2 * (1 - ratio);			



	}
	#endif

}